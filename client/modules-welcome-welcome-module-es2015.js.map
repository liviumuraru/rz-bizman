{"version":3,"sources":["./src/app/core/character/character.service.ts","./src/app/modules/welcome/welcome.component.html","./src/app/modules/welcome/welcome.component.ts","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js","./src/app/modules/welcome/welcome.module.ts","./src/app/modules/welcome/welcome.routing.module.ts","./src/app/modules/welcome/welcome.component.scss"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAkD;AACP;AACR;AACsB;IAG5C,gBAAgB,SAAhB,gBAAgB;IAGzB,YAAoB,UAAsB,EAAU,aAA4B;QAA5D,eAAU,GAAV,UAAU,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAe;QAFhF,yBAAoB,GAAG,IAAI,4CAAO,EAAE,CAAC;IAGrC,CAAC;IAEK,gBAAgB,CAAC,WAA4B;;YAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE;gBACzD,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,WAAW,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;CACJ;;YAjBQ,+DAAU;YAGV,oEAAa;;AAGT,gBAAgB;IAD5B,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,gBAAgB,CAW5B;AAX4B;;;;;;;;;;;;;ACN7B;AAAe,oWAAqS,yBAAyB,GAAG,wBAAwB,IAAI,kBAAkB,g9CAAg9C,WAAW,KAAK,kBAAkB,4oHAA4oH,E;;;;;;;;;;;;;;;;;;;;;;;ACA18K;AACO;AACmB;IAO/D,gBAAgB,SAAhB,gBAAgB;IAKzB,YAAoB,gBAAkC,EAAU,MAAc,EAAU,KAAqB;QAAzF,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAgB;QAJ7G,eAAU,GAAG,IAAI,CAAC;QAElB,kBAAa,GAAG,CAAC,CAAC;IAGlB,CAAC;IAEK,QAAQ;;YACV,2BAA2B;YAC3B,IAAI,CAAC,aAAa,GAAG,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3F,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC5B,CAAC;KAAA;IAEK,4BAA4B;;YAC9B,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAC,CAAC;QACxE,CAAC;KAAA;IAEK,iBAAiB;;QAEvB,CAAC;KAAA;IAEK,qBAAqB;;YACvB,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7C,CAAC;KAAA;IAEK,gCAAgC;;YAClC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAC1D,CAAC;KAAA;IAEK,gBAAgB;;QAEtB,CAAC;KAAA;IAEK,mBAAmB;;QAEzB,CAAC;KAAA;CACJ;;YA5CQ,yFAAgB;YADA,sDAAM;YAAtB,8DAAc;;AAQV,gBAAgB;IAL5B,+DAAS,CAAC;QACP,QAAQ,EAAE,SAAS;QACnB,oFAAuC;;KAE1C,CAAC;GACW,gBAAgB,CAqC5B;AArC4B;;;;;;;;;;;;;ACT7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4G;AACpC;AACV;AACA;AACe;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACwC;AACI;AAC5C;AACA;AACA;AACA;AACA;AACA,2BAA2B,4EAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,wBAAwB,mFAAqB;AAC7C;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA,uBAAuB,mFAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"modules-welcome-welcome-module-es2015.js","sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { of, Subject } from \"rxjs\";\r\nimport { PlayerService } from \"../player/player.service\";\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CharacterService {\r\n    characterDataSubject = new Subject();\r\n\r\n    constructor(private httpClient: HttpClient, private playerService: PlayerService) {\r\n    }\r\n\r\n    async getCharacterData(characterId: number | string) {\r\n        return this.playerService.getPlayerData().then((data: any) => {\r\n            return data.characters.filter(char => char.id == characterId);\r\n        });\r\n    }\r\n}","export default \"<mat-card class=\\\"card welcome-card\\\">\\r\\n    <loader *ngIf=\\\"showLoader\\\"></loader>\\r\\n\\r\\n    <section class=\\\"welcome-card__info-panel\\\" *ngIf=\\\"characterData\\\">\\r\\n        <section class=\\\"welcome-card__info-panel__text welcome-card__info-panel__text--large\\\">\\r\\n            Hello, <b>{{characterData.firstName}} {{characterData.lastName}} ({{characterData.id}})</b>\\r\\n        </section>\\r\\n        <mat-divider class=\\\"content-divider content-divider-horizontal\\\"></mat-divider>\\r\\n        <section class=\\\"welcome-card__info-panel__text\\\">\\r\\n            This application servers as a central point of information upon public organisations and also as an aggregator of your own organisations or organisations you are a part of.\\r\\n        </section>\\r\\n        <section class=\\\"welcome-card__info-panel__text\\\">\\r\\n            Below you will find a list of actions possible to you, depending on your current state of employment, your organisations and public information disclosed by the state.\\r\\n        </section>\\r\\n        <section class=\\\"welcome-card__info-panel__text\\\">\\r\\n            <b>NOTICE:</b> Please understand that this is work in progress, and thus you might find issues and strange, unexpected behaviour. Not all functionality is implemented yet. Make sure to report a bug if you spot it. If you notice any areas where improvements could be made within this application, please e-mail us on Discordia. Thanks!\\r\\n        </section>\\r\\n        <mat-divider class=\\\"content-divider content-divider-horizontal\\\" *ngIf=\\\"characterData.roles\\\"></mat-divider>\\r\\n        <section *ngIf=\\\"characterData.roles\\\" class=\\\"welcome-card__info-panel__roles welcome-card__info-panel__text\\\">\\r\\n          <p>Your roles:</p>\\r\\n          <mat-chip-list>\\r\\n            <mat-chip *ngFor=\\\"let role of characterData.roles\\\">\\r\\n              {{role.name}} - {{role.description}}\\r\\n            </mat-chip>\\r\\n          </mat-chip-list>\\r\\n      </section>\\r\\n    </section>\\r\\n\\r\\n    <mat-divider class=\\\"content-divider content-divider-horizontal\\\" *ngIf=\\\"characterData\\\"></mat-divider>\\r\\n\\r\\n    <mat-card-actions class=\\\"actions\\\" *ngIf=\\\"characterData\\\">\\r\\n        <section class=\\\"actions-card-row\\\">\\r\\n            <mat-card (click)=\\\"goToCheckLicenseApplications()\\\" matRipple class=\\\"card action-card\\\" matBadge=\\\"7\\\">\\r\\n                <mat-card-header>\\r\\n                  <mat-card-title>Organisation license applications</mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                  <p>\\r\\n                    See, comment, approve or deny business applications filed by citizens of San Andreas. Requires role: Judge. You see this because you are a Judge. \\r\\n                  </p>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card (click)=\\\"goToCheckLawsuits()\\\" matRipple class=\\\"card action-card\\\" matBadge=\\\"7\\\">\\r\\n                <mat-card-header>\\r\\n                  <mat-card-title>Lawsuits</mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                  <p>\\r\\n                    See, comment, schedule or share information upon any lawsuit. Requires role: Judge. You see this because you are a Judge. \\r\\n                  </p>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card (click)=\\\"goToSelfOrganisations()\\\" matRipple class=\\\"card action-card\\\" matBadge=\\\"2\\\">\\r\\n                <mat-card-header>\\r\\n                  <mat-card-title>My Organisations</mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                  <p>\\r\\n                    Check the status of organisations you are a part of and perform actions on them based on your roles in those organisations.\\r\\n                  </p>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card (click)=\\\"goToSelfOrganisationApplications()\\\" matRipple class=\\\"card action-card\\\" matBadge=\\\"5\\\">\\r\\n                <mat-card-header>\\r\\n                  <mat-card-title>My organisation requests</mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                  <p>\\r\\n                    Start the process of creating a new organisation or check on your existing organisation requests.\\r\\n                  </p>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </section>\\r\\n        <section class=\\\"actions-card-row\\\">\\r\\n            <mat-card (click)=\\\"goToSelfLawsuits()\\\" matRipple class=\\\"card action-card\\\" matBadge=\\\"6\\\">\\r\\n                <mat-card-header>\\r\\n                  <mat-card-title>My lawsuits</mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                  <p>\\r\\n                    Check lawsuits that you are a part of as any role, or file a new lawsuit\\r\\n                  </p>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card (click)=\\\"goToSelfInformation()\\\" matRipple class=\\\"card action-card\\\">\\r\\n                <mat-card-header>\\r\\n                  <mat-card-title>My citizen information</mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                  <p>\\r\\n                    Check state information about yourself\\r\\n                  </p>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </section>\\r\\n    </mat-card-actions>\\r\\n</mat-card>\";","import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { CharacterService } from \"src/app/core/character/character.service\";\r\n\r\n@Component({\r\n    selector: 'welcome',\r\n    templateUrl: './welcome.component.html',\r\n    styleUrls: ['./welcome.component.scss']\r\n})\r\nexport class WelcomeComponent implements OnInit {\r\n    showLoader = true;\r\n    characterData: any;\r\n    currentCharId = 4;\r\n\r\n    constructor(private characterService: CharacterService, private router: Router, private route: ActivatedRoute) {\r\n    }\r\n\r\n    async ngOnInit() {\r\n        //TODO get active character\r\n        this.characterData = (await this.characterService.getCharacterData(this.currentCharId))[0];\r\n        this.showLoader = false;\r\n    }\r\n\r\n    async goToCheckLicenseApplications() {\r\n        await this.router.navigate(['organisation/requests', 'management']);\r\n    }\r\n\r\n    async goToCheckLawsuits () {\r\n\r\n    }\r\n\r\n    async goToSelfOrganisations () {\r\n        await this.router.navigate(['business']);\r\n    }\r\n \r\n    async goToSelfOrganisationApplications() {\r\n        await this.router.navigate(['organisation/requests']);\r\n    }\r\n\r\n    async goToSelfLawsuits() {\r\n\r\n    }\r\n\r\n    async goToSelfInformation() {\r\n\r\n    }\r\n}","import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {\n}\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeMixinBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { NgModule } from '@angular/core';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { LoaderModule } from 'src/app/core/loader/loader.module';\r\nimport { WelcomeComponent } from '../welcome/welcome.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WelcomeRoutingModule } from './welcome.routing.module';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    WelcomeComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LoaderModule,\r\n    MatCardModule,\r\n    WelcomeRoutingModule,\r\n    MatDividerModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    MatBadgeModule,\r\n    MatChipsModule\r\n  ]\r\n})\r\nexport class WelcomeModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { WelcomeComponent } from './welcome.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: WelcomeComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class WelcomeRoutingModule { }\r\n","export default \".welcome-card, .card {\\n  margin-bottom: 15px;\\n  display: flex;\\n  flex-direction: column;\\n  min-height: 40px;\\n}\\n.welcome-card__info-panel, .card__info-panel {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.welcome-card__info-panel__text, .card__info-panel__text {\\n  font-size: 1.5em;\\n  margin-top: 15px;\\n  line-height: 1.15em;\\n}\\n.welcome-card__info-panel__text--large, .card__info-panel__text--large {\\n  font-size: 2.5em;\\n  align-self: center;\\n}\\n.welcome-card .actions, .card .actions {\\n  margin-top: 15px;\\n  margin: 0;\\n  padding: 0;\\n}\\n.welcome-card .actions .actions-card-row, .card .actions .actions-card-row {\\n  display: flex;\\n  flex-direction: row;\\n}\\n.welcome-card .actions .actions-card-row:last-child, .card .actions .actions-card-row:last-child {\\n  margin-right: 0;\\n}\\n.welcome-card .actions .actions-card-row .action-card, .card .actions .actions-card-row .action-card {\\n  min-width: 20%;\\n  margin-right: 1%;\\n  cursor: pointer;\\n}\\n.welcome-card .actions .actions-card-row .action-card ::ng-deep .mat-card-header .mat-card-header-text, .card .actions .actions-card-row .action-card ::ng-deep .mat-card-header .mat-card-header-text {\\n  margin: 0;\\n}\\n.welcome-card .actions .actions-card-row .action-card ::ng-deep .mat-badge-content, .card .actions .actions-card-row .action-card ::ng-deep .mat-badge-content {\\n  right: 1%;\\n  top: 1%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFx3ZWxjb21lLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksbUJBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxnQkFBQTtBQUNKO0FBQ0k7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7QUFDUjtBQUNRO0VBQ0ksZ0JBQUE7RUFDQSxnQkFBQTtFQUNBLG1CQUFBO0FBQ1o7QUFDWTtFQUNJLGdCQUFBO0VBQ0Esa0JBQUE7QUFDaEI7QUFJSTtFQUNJLGdCQUFBO0VBQ0EsU0FBQTtFQUNBLFVBQUE7QUFGUjtBQUlRO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0FBRlo7QUFJWTtFQUNJLGVBQUE7QUFGaEI7QUFLWTtFQUNJLGNBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7QUFIaEI7QUFNb0I7RUFDSSxTQUFBO0FBSnhCO0FBUWdCO0VBQ0ksU0FBQTtFQUNBLE9BQUE7QUFOcEIiLCJmaWxlIjoid2VsY29tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi53ZWxjb21lLWNhcmQsIC5jYXJkIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIG1pbi1oZWlnaHQ6IDQwcHg7XHJcblxyXG4gICAgJl9faW5mby1wYW5lbCB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG5cclxuICAgICAgICAmX190ZXh0IHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjVlbTtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogMTVweDtcclxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuMTVlbTtcclxuXHJcbiAgICAgICAgICAgICYtLWxhcmdlIHtcclxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMi41ZW07XHJcbiAgICAgICAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmFjdGlvbnMge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDE1cHg7XHJcbiAgICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICAgIHBhZGRpbmc6IDA7XHJcblxyXG4gICAgICAgIC5hY3Rpb25zLWNhcmQtcm93IHtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuXHJcbiAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC5hY3Rpb24tY2FyZCB7XHJcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDIwJTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMSU7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIDo6bmctZGVlcCAubWF0LWNhcmQtaGVhZGVyIHtcclxuICAgICAgICAgICAgICAgICAgICAubWF0LWNhcmQtaGVhZGVyLXRleHQge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgOjpuZy1kZWVwIC5tYXQtYmFkZ2UtY29udGVudCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDElO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMSU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0= */\";"],"sourceRoot":"webpack:///"}